name: üì¶ Windows Package Manager Archive

on:
  workflow_dispatch:

# ÂÖ®Â±ÄÁéØÂ¢ÉÂèòÈáè
env: 
  PACKAGE_MANAGER_DIR: "D:\\00PackageManager"
  CHOCO_CACHE: "D:\\00PackageManager\\ChocoCache"
  CHOCOLATEYINSTALL: "D:\\00PackageManager\\chocolatey"
  CHOCOLATEYLASTPATHUPDATE: "D:\\00PackageManager\\chocolateytools"
  SCOOP_DIR: "D:\\00PackageManager\\Scoop"

jobs:
  # ------------------------
  # 1. Scoop ÊûÑÂª∫‰∏éÂΩíÊ°£
  # ------------------------
  scoop-build:
    runs-on: windows-latest
    steps:
    - name: Checkout Repository
      uses: actions/checkout@v4

    - name: Setup Scoop
      shell: pwsh
      run: |
        mkdir $env:SCOOP_DIR
        $env:SCOOP=$env:SCOOP_DIR
        [Environment]::SetEnvironmentVariable('SCOOP', $env:SCOOP, 'User')
        Set-ExecutionPolicy RemoteSigned -scope CurrentUser 
        iwr -useb get.scoop.sh | iex
        scoop bucket add extras
        scoop bucket add versions
        scoop bucket add nirsoft
        scoop bucket add java
        scoop bucket add nonportable
        scoop bucket add ktools https://github.com/kenyon-wong/ktools
        echo "$env:SCOOP\shims" >> $env:GITHUB_PATH

    - name: Setup Scoop aria2
      shell: pwsh 
      run: |
        scoop install -k aria2 sudo git 7zip
        scoop config aria2-enabled true
        scoop config aria2-split 16
        scoop config aria2-max-connection-per-server 16
        scoop config aria2-min-split-size 4M

    - name: Install Base Utilities
      shell: pwsh 
      run: |
        scoop install -k innounp dark
        scoop install -k jq yq vim curl wget base64 gawk grep sed less touch which cwrsync cacert autocorrect fd

    - name: Install Runtimes & Dev Toolchains
      shell: pwsh 
      run: |
        scoop install -k liberica-full-lts-jdk liberica11-full-jdk liberica16-full-jdk liberica17-full-jdk liberica8-full-jdk
        scoop install -k gradle maven jenv
        scoop install -k python nodejs-lts go nuget

    - name: Install Editors & IDEs
      shell: pwsh
      run: |
        scoop install -k gui-for-clash
        scoop install -k extras/tableplus UniGetUI 

    - name: Install Security Tools
      shell: pwsh
      run: |
        scoop install -k nonportable/burp-suite-pro-np
        scoop install -k codeql osv-scanner jadx yara
        scoop install -k gogo spray zombie fscan pdtm ffuf fofax netspy ksubdomain chsrc crawlergo
        scoop install -k apktool blueteamtools hashcat

    - name: Install Database & Ops Tools
      shell: pwsh
      run: |
        scoop install -k openark kubectl sslscan sqlitestudio etcd
        scoop install -k office-tool-plus oss-browser

    - name: Install Utility Software
      shell: pwsh
      run: |
        scoop install -k dupeGuru dismplusplus renamer everything-cli
        scoop install -k adb honeyview imagemagick screentogif sharex SpaceSniffer
        scoop install -k chromedriver pixpin rad fscapture

    - name: Cleanup Scoop Cache
      shell: pwsh
      run: |
        scoop cache rm *
        scoop cleanup -k *

    - name: 'Show scoop config'
      shell: pwsh
      run: |
        scoop list
        scoop bucket list
        scoop config 
        scoop download windowsdesktop-runtime-lts windows-terminal firefox googlechrome

    - name: Clone GitHub Repositories
      shell: pwsh
      run: |
        git clone --depth 1 'https://github.com/github/vscode-codeql-starter.git' 'D:\00PackageManager\vscode-codeql-starter'
        git clone --depth 1 'https://github.com/github/codeql.git' 'D:\00PackageManager\CodeqlRules'

    - name: 'Downloads Pip Packages'
      shell: pwsh
      run: |
        echo "D:\00PackageManager\Scoop\apps\python\current\Scripts" >> $GITHUB_PATH
        $env:SCOOPpy='D:\00PackageManager\Scoop\apps\python\current\python.exe'
        & $env:SCOOPpy -m pip install --upgrade pip
        & $env:SCOOPpy -m pip -V
        & $env:SCOOPpy -m pip install sqlmap bs4 XlsxWriter tqdm python-libnmap pyDes pipx openpyxl tldextract
        & $env:SCOOPpy -m pip install colorama rncryptor pandas requests pycryptodome beautifulsoup4 chardet
        & $env:SCOOPpy -m pip install subprocess pocsuite qrcode accelerate androguard docx2pdf docx2txt logging colorlog
        & $env:SCOOPpy -m pip install dsinternals flask gradio ldapdomaindump simplejson python-magic python-docx
        & $env:SCOOPpy -m pip install pysocks pycryptodomex pyopenssl pyreadline gitpython PyYAML click retry argparse
        & $env:SCOOPpy -m pip install frida frida-tools
        git clone --depth 1 https://github.com/r0oth3x49/ghauri.git D:\00PackageManager\ghauri
        & $env:SCOOPpy -m pip install -r D:\00PackageManager\ghauri\requirements.txt
        & $env:SCOOPpy -m pip freeze

    - name: Compress Scoop Directory
      shell: pwsh
      run: |
        $7z="$env:SCOOP_DIR\apps\7zip\current\7z.exe"
        & $7z a -mx9 -t7z "${env:PACKAGE_MANAGER_DIR}-scoop.7z" "${env:PACKAGE_MANAGER_DIR}\*"

    - name: Upload Scoop Archive
      uses: actions/upload-artifact@v4
      with:
        name: scoop-archive
        path: ${{ env.PACKAGE_MANAGER_DIR }}-scoop.7z
        retention-days: 3
        compression-level: 0

  # ------------------------
  # 2. Chocolatey ÊûÑÂª∫‰∏éÂΩíÊ°£
  # ------------------------
  choco-build:
    runs-on: windows-latest
    steps:
    - name: Checkout Repository
      uses: actions/checkout@v4

    - name: Setup Chocolatey
      shell: pwsh
      run: |
        New-Item -Path $env:PACKAGE_MANAGER_DIR -ItemType Directory -Force
        New-Item -Path $env:CHOCO_CACHE -ItemType Directory -Force
        New-Item -Path $env:CHOCOLATEYINSTALL -ItemType Directory -Force
        New-Item -Path $env:CHOCOLATEYLASTPATHUPDATE -ItemType Directory -Force

    - name: Install Chocolatey
      shell: pwsh
      run: |
        Set-ExecutionPolicy Bypass -Scope Process -Force
        iex ((New-Object System.Net.WebClient).DownloadString('https://community.chocolatey.org/install.ps1'))

    - name: Install Packages with Chocolatey
      shell: pwsh
      run: |
        pwd
        dir
        choco install --yes --cache-location $env:CHOCO_CACHE ./ChocolateyPackage.config

    - name: Compress Chocolatey Directories
      shell: pwsh
      run: |
        $7z="${env:ProgramFiles}\7-Zip\7z.exe"
        & $7z a -mx9 -t7z "${env:PACKAGE_MANAGER_DIR}-choco.7z" "${env:PACKAGE_MANAGER_DIR}\*"
        & $7z a -mx9 -t7z "${env:CHOCO_CACHE}.7z" "${env:CHOCO_CACHE}\*"

    - name: Upload Choco Archives
      uses: actions/upload-artifact@v4
      with:
        name: choco-manager-archive
        path: ${{ env.PACKAGE_MANAGER_DIR }}-choco.7z
        retention-days: 3
        compression-level: 0

    - name: Upload Choco Cache
      uses: actions/upload-artifact@v4
      with:
        name: choco-cache-archive
        path: ${{ env.CHOCO_CACHE }}.7z
        retention-days: 3
        compression-level: 0

  # ------------------------
  # 3. Finalize Ê±áÊÄª
  # ------------------------
  finalize:
    runs-on: ubuntu-latest
    needs: 
      - scoop-build
      - choco-build
    steps:
      - name: Report
        run: |
          echo "‚úÖ Scoop Âíå Chocolatey ÊûÑÂª∫Â∑≤ÂÆåÊàê"
          echo "Artifacts ÂèØÂú® Actions È°µÈù¢‰∏ãËΩΩÔºö"
          echo "- scoop-archive"
          echo "- choco-manager-archive"
          echo "- choco-cache-archive"
